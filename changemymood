#!/usr/bin/env python


from random import randrange, choice
import string
import locale
import curses


locale.setlocale(locale.LC_ALL, '')

BLACK = 0
RED = 1
GREEN = 2
YELLOW = 3
BLUE = 4
MAGENTA = 5
CYAN = 6
WHITE = 7

ERROR_COLOR = 11
OK_COLOR = 22

class Noise(object):
    def __init__(self):
        self.cursor_is_visible = True
        curses.wrapper(self.run)

    def toggle_cursor_visibility(self):
        if self.cursor_is_visible:
            curses.curs_set(0)
            self.cursor_is_visible = False
        else:
            self.cursor_is_visible = True
            curses.curs_set(1)

    def run(self, stdscr):
        self.stdscr = stdscr
        self.set_color_pairs()
        self.setup()

        while True:
            key = self.stdscr.getch()
            if key == ord('q'):
                break
            elif key == curses.KEY_DOWN:
                wh = self.main_win.getmaxyx()
                if self.cursor_is_visible:
                    self.toggle_cursor_visibility()
                chars = list(string.ascii_letters)
                while True:
                    if randrange(0, 100) == 1:
                        self.main_win.bkgd(
                            ord(choice(chars[0:len(chars) / 2])),
                            curses.color_pair(randrange(0, 7)))

                    for i in range(randrange(0, 1000)):
                        self.main_win.addch(
                            randrange(1, wh[0] - 1),
                            randrange(0, wh[1]), choice(chars),
                            curses.color_pair(randrange(0, 7)))

                    rect_width = randrange(2, (wh[0] - 2) / 4)
                    rect_height = rect_width * 2
                    rand_x = randrange(0, wh[1] - rect_height - 1)
                    rand_y = randrange(1, wh[0] - rect_width - 1)
                    self.draw_rect(rand_y, rand_x,rect_height, rect_width,
                                   choice(range(0, 7)), char=choice(chars))

                    self.main_win.refresh()
                    curses.napms(1)
                self.toggle_cursor_visibility()

    def draw_rect(self, y, x, height, width, color=WHITE, char='@',
                  do_flash=False):
        x_pos = x
        y_pos = y

        for x in range(height):
            for y in range(width):
                self.main_win.addch(
                    y + y_pos,
                    x + x_pos,
                    char,
                    curses.color_pair(color))

    def set_color_pairs(self):
        curses.use_default_colors()

        # Basic colors
        curses.init_pair(RED, curses.COLOR_RED, curses.COLOR_BLACK)
        curses.init_pair(GREEN, curses.COLOR_GREEN, curses.COLOR_BLACK)
        curses.init_pair(YELLOW, curses.COLOR_YELLOW, curses.COLOR_BLACK)
        curses.init_pair(BLUE, curses.COLOR_BLUE, curses.COLOR_BLACK)
        curses.init_pair(MAGENTA, curses.COLOR_MAGENTA, curses.COLOR_BLACK)
        curses.init_pair(CYAN, curses.COLOR_CYAN, curses.COLOR_BLACK)
        curses.init_pair(WHITE, curses.COLOR_WHITE, curses.COLOR_BLACK)

        # Special color combinations
        curses.init_pair(ERROR_COLOR, curses.COLOR_WHITE, curses.COLOR_RED)
        curses.init_pair(OK_COLOR, curses.COLOR_BLACK, curses.COLOR_GREEN)

    def setup(self):
        if self.cursor_is_visible:
            self.toggle_cursor_visibility()

        welcome_msg = 'Welcome! Feeling down? Then hit the DOWN KEY.'
        self.stdscr.refresh()
        wh = self.stdscr.getmaxyx()
        self.main_win = curses.newwin(wh[0] - 1, wh[1] - 1, 0, 0)

        self.main_win.bkgd(ord('`'), curses.color_pair(RED))
        self.main_win.bkgdset(ord(' '), curses.color_pair(BLACK))
        self.main_win.addstr(wh[0] / 3,
                             wh[1] / 2 - len(welcome_msg) / 2,
                             welcome_msg,
                             curses.color_pair(YELLOW) | curses.A_BOLD)

        self.main_win.addstr(wh[0] - 3,
                             wh[1] - 10,
                             ' q: Quit ',
                             curses.color_pair(RED) | curses.A_REVERSE)

        self.main_win.noutrefresh()
        curses.doupdate()


if __name__ == '__main__':
    noise = Noise()
